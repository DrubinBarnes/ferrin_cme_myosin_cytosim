# Created 2025-05-13 Tue 10:34
#+title: 6.11.6 analysis
#+author: Max Ferrin
#+property: header-args :exports both :results raw drawer :async t :eval no-export :cache no :tangle no
#+export_file_name: gliding_analysis
* export this to other file formats

These files are symbolically linked such that their source is the
version-controlled directory, but they can be exported from the local directory
where the analysis happens

Due to this difference in directory structure, anyone else using these scripts
will have to make sure the locations of their data are specified correctly in
the [[id:1bb36231-6e9b-49fc-9d6e-c6583bb5b561][set working directories]] section.
** convert to jupyter notebook
*** using pandoc
this looks nice but it's just a big markdown block
#+begin_src bash :session idk
pandoc 6.11.6_analysis.org -o gliding_analysis_pandoc.ipynb
#+end_src

#+results: 
:results:
nil:END:
*** using orgparse

this is the only way that makes runnable python cells, though lots of formatting
doesn't work

#+begin_src python :tangle convert_org_to_ipynb.py
import orgparse
import nbformat as nbf
import re
import base64

def parse_results(results_block):
    """
    Parse the #+RESULTS: block to extract outputs.
    """
    outputs = []
    lines = results_block.strip().split("\n")

    for line in lines:
        if line.strip().startswith(": "):
            outputs.append(nbf.v4.new_output(output_type="stream", name="stdout", text=line[2:].strip() + "\n"))
        elif re.match(r"\[\[.*\.(png|jpg|jpeg|gif)\]\]", line.strip()):
            image_path = re.search(r"\[\[(.*\.(png|jpg|jpeg|gif))\]\]", line.strip()).group(1)
            try:
                with open(image_path, "rb") as f:
                    image_data = base64.b64encode(f.read()).decode("utf-8")
                outputs.append(nbf.v4.new_output(
                    output_type="display_data",
                    data={"image/png": image_data},
                    metadata={}
                ))
            except FileNotFoundError:
                print(f"Warning: Image file not found: {image_path}")
    return outputs

def convert_org_links_to_markdown(text):
    """
    Convert Org mode links to Markdown links.
    """
    text = re.sub(r"\[\[([^\]]+)\]\[([^\]]+)\]\]", r"[\2](\1)", text)
    text = re.sub(r"\[\[([^\]]+)\]\]", r"[\1](\1)", text)
    return text

def org_to_ipynb(org_file, ipynb_file):
    org = orgparse.load(org_file)
    nb = nbf.v4.new_notebook()
    cells = []

    for node in org[1:]:
        if ":noexport:" in node.tags or (node.heading and ":noexport:" in node.heading.lower()):
            continue

        if node.heading:
            heading_level = "#" * node.level
            cells.append(nbf.v4.new_markdown_cell(f"{heading_level} {node.heading}"))

        in_code_block = False
        in_results_block = False
        code_lines = []
        markdown_lines = []
        results_block = ""

        for line in node.body.split("\n"):
            if line.strip().startswith("#+BEGIN_SRC python"):
                in_code_block = True
                if markdown_lines:
                    markdown_text = convert_org_links_to_markdown("\n".join(markdown_lines)).strip()
                    if markdown_text:
                        cells.append(nbf.v4.new_markdown_cell(markdown_text))
                    markdown_lines = []
                continue
            elif line.strip().startswith("#+END_SRC"):
                in_code_block = False
                if code_lines:
                    code_cell = nbf.v4.new_code_cell("\n".join(code_lines))
                    cells.append(code_cell)
                    code_lines = []
                continue
            elif line.strip().startswith("#+RESULTS:"):
                in_results_block = True
                continue
            elif in_results_block and line.strip() == ":end:":
                in_results_block = False
                if results_block.strip():
                    outputs = parse_results(results_block)
                    if outputs and cells:
                        cells[-1].outputs = outputs
                results_block = ""
            elif in_code_block:
                code_lines.append(line)
            elif in_results_block:
                results_block += line + "\n"
            else:
                markdown_lines.append(convert_org_links_to_markdown(line))

        markdown_text = convert_org_links_to_markdown("\n".join(markdown_lines)).strip()
        if markdown_text:
            cells.append(nbf.v4.new_markdown_cell(markdown_text))

    nb.cells = cells
    with open(ipynb_file, "w") as f:
        nbf.write(nb, f)

# Convert your Org file
org_to_ipynb("6.11.6_analysis.org",
             "gliding_analysis_orgparse.ipynb")
#+end_src

#+results: 

#+begin_src emacs-lisp :tangle no
(org-babel-tangle)
#+end_src

#+results: 
: d801dac30f4ce9772b96db7e07ee6f2e



#+begin_src bash :session idk
python convert_org_to_ipynb.py
#+end_src

#+results: 
:results:
nil:END:
** export to org document
#+begin_src emacs-lisp :tangle no
(org-org-export-to-org)
#+end_src

#+results: 
: 779034df5b081f6b2f77f4f5fb6522d5
** export to markdown document
#+begin_src emacs-lisp :tangle no
(org-md-export-to-markdown)
#+end_src

#+results: 
: 6e4588c0990cca7fb6ad29f883d8fb96
* figure generation index

| figure | panel | link                                                                       |
|--------+-------+----------------------------------------------------------------------------|
| S2     | D     | [[id:7be2a9ec-deba-42ae-b0b5-1a8a77eadc25][final myo parameters]]          |
| S2     | D     | [[id:d14f2d79-de0e-42eb-8eaa-3a28bd3b8583][heat map of average velocity]]  |
| S2     | D     | [[id:6ac327e3-fdaa-4aa4-8477-b359a8f3c311][line plot of average velocity]] |
* configuration
** set global variables
#+begin_src python
#timestep = 5e-5
report = 'no'
replace_movies = 'no'
save_figures = 'yes'
save_dataframes = 'yes'
#+end_src

#+results: 
** load and configure libraries
#+begin_src python
import os
import sys
from tabulate import tabulate
import math
import numpy as np
import pandas as pd
import shutil
import subprocess
from subprocess import Popen
import datetime
import matplotlib.pyplot as plt  # plotting
import seaborn as sns  # nicer plotting
from decimal import Decimal
import matplotlib.colors as mplcolors
import matplotlib
from matplotlib.colors import LogNorm
from matplotlib.colors import SymLogNorm
from matplotlib.cm import ScalarMappable
from matplotlib.ticker import FuncFormatter
from scipy.stats import binned_statistic_2d
from scipy import stats
from scipy.signal import savgol_filter
from scipy.signal import find_peaks
import textwrap
from decimal import Decimal
from scipy.stats import binned_statistic_2d
from scipy.stats import linregress
from scipy.stats import sem
from matplotlib.font_manager import FontProperties
import matplotlib.pyplot as plt  # plotting
import matplotlib.colors as mcolors
from matplotlib.colors import LogNorm
from matplotlib.colors import SymLogNorm
plt.style.use('seaborn-v0_8-colorblind') # set plot style
plt.cool()                          # heatmap color scheme
matplotlib.rcParams['axes.prop_cycle'] = matplotlib.cycler(color=mcolors.TABLEAU_COLORS)
%matplotlib inline

import seaborn as sns  # nicer plotting
sns.set_style('whitegrid')  # set plot style

SMALL_SIZE = 20
MEDIUM_SIZE = 24
BIGGER_SIZE = 30

plt.rc('font', size=SMALL_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=MEDIUM_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
plt.rc('figure', figsize=[6,5]) # default figure width, height

now = datetime.datetime.now()
date = now.strftime('%Y%m%d')
pref = date
#+end_src

#+results: 
: <Figure size 600x500 with 0 Axes>
** set working directories
#+begin_src python
#machine = 'peeks'
machine = 'ltpbukem'

if machine == 'ltpbukem':
    drive_dir = '/home/maxferrin/google_drive/'

if machine == 'bizon':
    drive_dir = '/media/bizon/DATA/MFerrin/insync/'

if machine == 'peeks':
    drive_dir = '/scratch/ferrin/unison_peeks/'

if machine == 'drumroom':
    drive_dir = '/Users/max/google_drive/'

if machine == 'mbp':
    drive_dir = '/Users/maxferrin/google_drive/'

if machine == 'sobarky':
    drive_dir = '/Users/dblab/google_drive/'


working_dir = os.path.join(drive_dir, 'grad_school/db_lab/code/analysis/20230630_6.11.6_glidingrecapitulation/')
#working_dir = '/home/maxferrin/mount/trinity/home/google_drive/grad_school/db_lab/code/analysis/20230630_6.11.6_glidingrecapitulation/'
cytosim_dir = os.path.join(drive_dir, 'grad_school/db_lab/code/cytosim_dblab/', machine)

if machine == 'peeks':
    working_dir = '/run/media/ferrin/Volume/max/analysis/20230630_6.11.6_glidingrecapitulation/'
    cytosim_dir = '/home/ferrin/cytosim/'

dataframes_dir = os.path.join(working_dir,'dataframes/')

os.chdir(working_dir)

if os.path.isdir('figures') == False:
    os.mkdir('figures')
if os.path.isdir('dataframes') == False:
    os.mkdir('dataframes')
#+end_src

#+results: 
** load custom functions
#+begin_src python
# add parent folder to path
sys.path.insert(1, '../')
from cytosim_analysis import cytosim_analysis_functions as caf

# reload custom library
from importlib import reload
reload(sys.modules['cytosim_analysis'])
#+end_src

#+results: 
: <module 'cytosim_analysis' from '/home/maxferrin/SynologyDrive/google_drive/grad_school/db_lab/code/analysis/20230508_6.6.5_myominimal/../cytosim_analysis/__init__.py'>
* find directories that have outputs or config files
#+begin_src python
output_dirs, config_dirs = caf.find_directories()
print(output_dirs, config_dirs)
#+end_src

#+results: 
: ['6.11.6_output'] ['6.11.6']
* report simulations
this crashes

#+begin_src python
 solid_allruns_allparams, properties_allruns_allparams, \
 configs_allruns_allparams, single_hip1r_allruns_allparams, \
 single_membrane_myosin_allruns_allparams, fiber_forces_allruns_allparams, \
 fiber_clusters_allruns_allparams, fiber_tensions_allruns_allparams, \
 fiber_ends_allruns_allparams, rundirs_allparams, total_runs = \
 caf.report_sims(working_dir, output_dirs, config_dirs, cytosim_dir,
 report, replace_movies)
#+end_src

this is better
#+begin_src python
properties_allruns_allparams, configs_allruns_allparams, \
fiber_ends_allruns_allparams, rundirs_allparams, \
total_runs = caf.report_fiber_ends(
     working_dir, output_dirs, config_dirs,
     cytosim_dir, report, replace_movies)
rundirs_allparams_df = pd.DataFrame.from_dict(rundirs_allparams, orient = 'index')
if save_dataframes == 'yes':
    rundirs_allparams_df.to_pickle(dataframes_dir+'rundirs_allparams.pkl')
#+end_src

#+results: 
: finished reporting 6.11.6_output
* read simulation properties

** put all properties and configs into dataframes
#+begin_src python
properties_allparams, config_allparams = caf.props_configs(
    output_dirs, rundirs_allparams_df,
    properties_allruns_allparams, configs_allruns_allparams)
#+end_src

#+results: 
** filter for properties that vary among simulations
#+begin_src python
   cols = list(properties_allparams)
   nunique = properties_allparams.apply(pd.Series.nunique)
   cols_to_drop = nunique[nunique == 1].index
   properties_unique = properties_allparams.drop(cols_to_drop, axis=1)
   #properties_unique = properties_unique.drop(labels='internalize_random_seed',axis=1)
   properties_unique.head()
#+end_src

#+results: 
|                                   | glide_random_seed | membrane_myosin_stiffness |
|-----------------------------------+-------------------+---------------------------|
| ('6.11.6_output', 'run0012_0000') |       1.29091e+09 |                        40 |
| ('6.11.6_output', 'run0007_0000') |        1.1413e+09 |                        80 |
| ('6.11.6_output', 'run0016_0000') |       9.18455e+08 |                       640 |
| ('6.11.6_output', 'run0004_0000') |        4.1467e+09 |                       640 |
| ('6.11.6_output', 'run0005_0000') |       2.63386e+07 |                      1280 |


#+begin_src python
 cols = list(config_allparams)
 nunique = config_allparams.apply(pd.Series.nunique)
 cols_to_drop = nunique[nunique == 1].index
 config_unique = config_allparams.drop(cols_to_drop, axis=1)
 #config_unique = config_unique.drop(['membrane_myosin_position'], axis=1)
 config_unique = config_unique.astype('float')
 config_unique.head()
#+end_src

#+results[1b422a68534578bf15fed4ee46a5f69db45e3025]: 
|                                   | membrane_myosin_stiffness | membrane_myosin_number |
|-----------------------------------+---------------------------+------------------------|
| ('6.11.6_output', 'run0012_0000') |                        40 |                  1e+06 |
| ('6.11.6_output', 'run0007_0000') |                        80 |                 100000 |
| ('6.11.6_output', 'run0016_0000') |                       640 |                  1e+06 |
| ('6.11.6_output', 'run0004_0000') |                       640 |                  10000 |
| ('6.11.6_output', 'run0005_0000') |                      1280 |                  10000 |
* parse results into dataframe

** fiber ends

#+begin_src python
ends_allparams = caf.get_fiber_ends_2d(output_dirs, rundirs_allparams_df, fiber_ends_allruns_allparams)

if save_dataframes == 'yes':
    ends_allparams.to_pickle(dataframes_dir+'ends_allparams.pkl')

ends_allparams.head()
#+end_src

#+results: 
:RESULTS:
: finished parsing 6.11.6_output

|                                            | fiber_id | length | minus_state | minus_xpos | minus_ypos | minus_xdir | minus_ydir | plus_state | plus_xpos | plus_ypos | plus_xdir | plus_ydir | plus_rpos |
|--------------------------------------------+----------+--------+-------------+------------+------------+------------+------------+------------+-----------+-----------+-----------+-----------+-----------|
| ('6.11.6_output', 'run0012_0000', 0.1, 9)  |        9 |      1 |           0 |    4.37804 |    -5.9312 |     0.5723 |   -0.82006 |          0 |   4.75198 |  -6.85142 |   0.26231 |  -0.96498 |   8.33806 |
| ('6.11.6_output', 'run0012_0000', 0.1, 5)  |        5 |      1 |           0 |   -2.78723 |   -8.55029 |    0.70925 |   -0.70496 |          0 |  -2.39566 |  -9.44762 |   0.25752 |  -0.96626 |   9.74663 |
| ('6.11.6_output', 'run0012_0000', 0.1, 6)  |        6 |      1 |           0 |    1.71594 |    7.66453 |    0.94765 |   -0.31929 |          0 |   2.60265 |    7.2213 |   0.75858 |  -0.65155 |     7.676 |
| ('6.11.6_output', 'run0012_0000', 0.1, 14) |       14 |      5 |           0 |   -3.43021 |    1.12888 |   -0.69244 |    0.72148 |          0 |  -7.83982 |   3.42299 |  -0.86455 |   0.50259 |   8.55451 |
| ('6.11.6_output', 'run0012_0000', 0.1, 12) |       12 |      5 |           0 |    3.36138 |    6.16868 |    0.01631 |   -0.99988 |          0 |   2.42901 |   1.27944 |  -0.36657 |  -0.93039 |   2.74537 |
:END:
* load in previously parsed dataframes
#+begin_src python
ends_allparams = pd.read_pickle(dataframes_dir+'ends_allparams.pkl')
rundirs_allparams_df = pd.read_pickle(dataframes_dir+'rundirs_allparams.pkl')
rundirs_allparams_df.fillna(value='empty', inplace=True)
#+end_src

#+results: 
* plot results

** actin plus end displacement vs. time
*** all parameters

#+begin_src python
 num_plots = total_runs

 width = 6
 if width > num_plots:
     width = 1
 height = int(math.ceil(float(num_plots)/float(width)))

 #max_int = solid_allparams['internalization'].max()*1000

 # plt.figure(figsize=(4*width,3*height)) #width, height
 fig, ax = plt.subplots(nrows=height, ncols=width, sharex=True, sharey=True, figsize=(6*width,7*height))
 fig.add_subplot(111, frameon=False)
 plt.tick_params(labelcolor='none', top='off', bottom='off', left='off', right='off')
 plt.grid(False)
 fig.text(0.5, 0, 'time (s)', ha='center', size=24)
 fig.text(0, 0.5, 'barbed end displacement (μm)', va='center', rotation='vertical', size=24)

 plot_no = 0

 for output_dir in output_dirs:
     rundirs = rundirs_allparams[output_dir]
     for run in rundirs:

         props = config_allparams.loc[output_dir].loc[run]
         #viscosity = props['internalize.cym_viscosity']
         #hip1r_off = props['strongbinder_unbinding'].split(',')[0]

         plot_no += 1

         plt.subplot(height,width,plot_no) #height, width
         for fiber_id in range(1,26):
             xdisp = ends_allparams.loc[[output_dir], [run], :, [fiber_id]]['plus_xpos']-ends_allparams.loc[(output_dir, run, 0.1, fiber_id)]['plus_xpos']
             ydisp = ends_allparams.loc[[output_dir], [run], :, [fiber_id]]['plus_ypos']-ends_allparams.loc[(output_dir, run, 0.1, fiber_id)]['plus_ypos']
             disp = np.sqrt(np.square(xdisp) + np.square(ydisp))
             x = xdisp.reset_index()['time']
             y = disp
             plt.plot(x,y)
         plt.xlim(right = 5)
         plt.ylim(top = 1.5)
         # plt.xlabel('time (s)')
         # plt.ylabel('internalization (nm)')

         title = output_dir+'\n'+run+'\n'
         for prop in list(config_unique):
             title += prop + ' = ' + str(props[prop]) + '\n'

         # for prop, value in zip(config_groups, name):
         #     title += prop + ' = ' + str(value) + '\n'


         plt.title(title)

 plt.tight_layout()

 if save_figures == 'yes':
   plt.savefig(working_dir+'figures/'+pref+'_plusend_disp-vs-time_all.svg')
#+end_src

#+results: 
:RESULTS:
: /tmp/ipykernel_21790/720312654.py:30: MatplotlibDeprecationWarning: Auto-removal of overlapping axes is deprecated since 3.6 and will be removed two minor releases later; explicitly call ax.remove() as needed.
:   plt.subplot(height,width,plot_no) #height, width

[[file:./.ob-jupyter/8758b80dfecfb60b4157e1cd4981fb545eeed5f5.png]]
:END:
*** final myo parameters
#+begin_src python
plt.figure(figsize=[6,5])

for fiber_id in range(1,26):
    xdisp = ends_allparams.loc[['6.11.6_output'], ['run0019_0000'], :, [fiber_id]]['plus_xpos']-ends_allparams.loc[('6.11.6_output', 'run0019_0000', 0.1, fiber_id)]['plus_xpos']
    ydisp = ends_allparams.loc[['6.11.6_output'], ['run0019_0000'], :, [fiber_id]]['plus_ypos']-ends_allparams.loc[('6.11.6_output', 'run0019_0000', 0.1, fiber_id)]['plus_ypos']
    disp = np.sqrt(np.square(xdisp) + np.square(ydisp))
    x = xdisp.reset_index()['time']
    y = disp
    plt.plot(x,y)

plt.xlabel('Time ($s$)')
plt.ylabel('Barbed end\ndisplacement ($\mu m$)')
plt.tight_layout()

if save_figures == 'yes':
    plt.savefig(working_dir+'figures/publish/gliding_displacement.svg')
#+end_src

#+results: 
[[file:./.ob-jupyter/2e8a4a18826bb13c2239dd231ffd1cefae8305e4.png]]

#+begin_src python
config_allparams.loc[('6.11.6_output', 'run0019_0000')]
#+end_src

#+results: 
#+begin_example
bud_viscosity                                      1
blobneck_viscosity                                 1
glide_time_step                                0.001
glide_viscosity                                  1.0
glide_steric                                     1.0
glide_display                            ( style=2 )
cell_geometry                      ( periodic 10 10)
cell_number                                    space
actin_rigidity                                 0.041
actin_segmentation                              0.01
actin_display                                      {
actin_line_width                                 2.0
actin_line_style                                 1.0
actin_point_size                                 8.0
actin_point_style                                2.0
actin_steric                                     1.0
actin_steric_radius                            0.008
myosin_binding_rate                              3.0
myosin_binding_range                           0.004
myosin_unbinding_rate                           67.6
myosin_unbinding_force                         -3.67
myosin_activity                               mighty
myosin_max_speed                                 5.0
myosin_stall_force                          100000.0
myosin_limit_speed                               1.0
myosin_display                { size=6; color=red; }
membrane_myosin_hand                          myosin
membrane_myosin_stiffness                       80.0
membrane_myosin_activity                       fixed
actin_number                                       5
actin_length                                    10.0
membrane_myosin_number                      10000000
gliding_label                (100 pN/um stiffness -)
gliding_point_size                               6.0
gliding_style                                    2.0
gliding_nb_steps                             60000.0
gliding_nb_frames                              600.0
Name: (6.11.6_output, run0019_0000), dtype: object
#+end_example
** heat map of average velocity
#+begin_src python
results = []

for output_dir in output_dirs:
    rundirs = rundirs_allparams[output_dir]
    for run in rundirs:
        props = config_unique.loc[(output_dir, run)]
        stiffness = props['membrane_myosin_stiffness']
        number = props['membrane_myosin_number']

        fiber_velocities = []

        for fiber_id in range(1, 26):
            try:
                xpos = ends_allparams.loc[[output_dir], [run], :, [fiber_id]]['plus_xpos']
                ypos = ends_allparams.loc[[output_dir], [run], :, [fiber_id]]['plus_ypos']
            except KeyError:
                continue  # skip missing fibers

            xpos = xpos.droplevel(['param_sweep', 'run', 'id'])
            ypos = ypos.droplevel(['param_sweep', 'run', 'id'])

            time = xpos.index.values
            if len(time) < 2:
                continue  # skip incomplete data

            x0, y0 = xpos.iloc[0], ypos.iloc[0]
            disp = np.sqrt((xpos - x0)**2 + (ypos - y0)**2)

            # Linear regression: displacement vs. time
            slope, intercept, r_value, p_value, std_err = linregress(time, disp.values)
            fiber_velocities.append(slope)

        if fiber_velocities:
            mean_velocity = np.mean(fiber_velocities)
            results.append([int(stiffness), number, mean_velocity])

# Create DataFrame and pivot
df = pd.DataFrame(results, columns=['stiffness', 'number', 'mean_velocity'])

# Sort both axes before pivoting
df_sorted = df.sort_values(by=['stiffness', 'number'])

# Create pivot table with sorted axes
heatmap_data = df_sorted.pivot(index='stiffness', columns='number', values='mean_velocity')

# Sort index and columns explicitly to ensure consistent ordering
heatmap_data = heatmap_data.sort_index(ascending=False, axis=0).sort_index(axis=1)

# Extract tick labels from columns/index
x_labels = heatmap_data.columns.values  # these are your real myosin counts
x_labels_formatted = [f'$10^{{{int(np.log10(x))}}}$' for x in x_labels]

# Plot heatmap
plt.figure(figsize=(8, 6))
ax = sns.heatmap(heatmap_data, annot=True, fmt=".3f", cmap='magma',
                 cbar_kws={'label': 'Mean barbed end velocity ($\\frac{\\mu m}{s}$)'})

# Set formatted tick labels manually
ax.set_xticklabels(x_labels_formatted, rotation=0)

# Axis labels
plt.xlabel('Myosin molecule count')
plt.ylabel('Myosin bond stiffness ($\\frac{pN}{\\mu m}$)')
plt.tight_layout()

if save_figures == 'yes':
  plt.savefig(working_dir+'figures/publish/plusend_mean_velocity_heatmap.svg')
#+end_src

#+results: 
[[file:./.ob-jupyter/596acd1323f7ba5359e17e6477a72c33cd77c609.png]]
** line plot of average velocity
#+begin_src python

results = []

for output_dir in output_dirs:
    rundirs = rundirs_allparams[output_dir]
    for run in rundirs:
        props = config_unique.loc[(output_dir, run)]
        stiffness = props['membrane_myosin_stiffness']
        number = props['membrane_myosin_number']

        fiber_velocities = []

        for fiber_id in range(1, 26):
            try:
                xpos = ends_allparams.loc[[output_dir], [run], :, [fiber_id]]['plus_xpos']
                ypos = ends_allparams.loc[[output_dir], [run], :, [fiber_id]]['plus_ypos']
            except KeyError:
                continue  # skip missing fibers

            xpos = xpos.droplevel(['param_sweep', 'run', 'id'])
            ypos = ypos.droplevel(['param_sweep', 'run', 'id'])

            time = xpos.index.values
            if len(time) < 2:
                continue  # skip incomplete data

            x0, y0 = xpos.iloc[0], ypos.iloc[0]
            disp = np.sqrt((xpos - x0)**2 + (ypos - y0)**2)

            # Linear regression: displacement vs. time
            slope, intercept, r_value, p_value, std_err = linregress(time, disp.values)
            fiber_velocities.append(slope)

        for v in fiber_velocities:
            results.append([int(stiffness), int(number), v])

# Convert to DataFrame
df = pd.DataFrame(results, columns=['stiffness', 'number', 'velocity'])

# Plot
plt.figure(figsize=(8, 6))

for myonumber in np.sort(config_unique['membrane_myosin_number'].unique()):
    # Filter for myosin count = 10^7
    dfnum = df[df['number'] == myonumber]

    # Group by stiffness
    grouped = dfnum.groupby('stiffness')['velocity']
    means = grouped.mean()
    errors = grouped.apply(sem)

    # Sort
    stiffness_sorted = sorted(means.index)
    means_sorted = means.loc[stiffness_sorted]
    errors_sorted = errors.loc[stiffness_sorted]

    plt.plot(stiffness_sorted, means_sorted,
             label=f'$10^{{{int(np.log10(myonumber))}}}$')
    plt.fill_between(stiffness_sorted,
                    means_sorted - errors_sorted,
                    means_sorted + errors_sorted,
                    alpha=0.3)

plt.xscale('log',base=2)
#plt.xticks(stiffness_sorted, [f'$10^{{{int(np.log10(x))}}}$' for x in stiffness_sorted])
plt.xlabel('Myosin bond stiffness ($\\frac{pN}{\\mu m}$)')
plt.ylabel('Mean barbed end velocity ($\\frac{\\mu m}{s}$)')
leg = plt.legend(title='Myosin\nmolecule\ncount')
plt.setp(leg.get_title(), multialignment='center')
plt.tight_layout()

if save_figures == 'yes':
  plt.savefig(working_dir+'figures/publish/plusend_mean_velocity_line.svg')
#+end_src

#+results: 
[[file:./.ob-jupyter/8a5627cc2195b1518ba71a055d459b27cb4846ab.png]]
